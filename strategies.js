strategies = {"BankWharf":"# Play Big Money including Banks, except buy Wharf with every $5 buy.\n{\n  name: 'BankWharf'\n  gainPriority: (state) -> [\n    \"Colony\" if state.current.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Bank\"\n    \"Gold\"\n    \"Wharf\"\n    \"Silver\"\n    \"Copper\" if state.gainsToEndGame() <= 3\n  ]\n}\n","BigMoney":"# This is an implementation of the pure Big Money strategy, derived from\n# the one called \"Big Money Ultimate\" or \"BMU\" on the forums and in\n# Geronimoo's simulator.\n{\n  name: 'BigMoney'\n  gainPriority: (state) -> [\n    \"Colony\" if state.current.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6 \\\n               or state.countInSupply(\"Province\") <= 6\n    \n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Gold\"\n    \"Silver\"\n    \"Copper\" if state.gainsToEndGame() <= 3\n  ]\n}\n","BigSmithy":"{\n  name: 'BigSmithy'\n  gainPriority: (state) -> [\n    \"Colony\" if state.current.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6 \\\n               or state.countInSupply(\"Province\") <= 6\n    \n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Gold\"\n    \"Smithy\" if state.current.countInDeck(\"Smithy\") < 2 \\\n             and state.current.numCardsInDeck() >= 16\n    \"Smithy\" if state.current.countInDeck(\"Smithy\") < 1\n    \"Silver\"\n    \"Copper\" if state.gainsToEndGame() <= 3\n  ]\n}\n\n","ChapelMountebank":"# Gain one Chapel and one Mountebank, and otherwise play Big Money.\n{\n  name: 'ChapelMountebank'\n  gainPriority: (state) -> [\n    \"Colony\" if state.current.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\n    \"Mountebank\" if state.current.countInDeck(\"Mountebank\") == 0\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Gold\"\n    \n    # If this bot somehow gets rid of its chapel later in the game,\n    # it won't try to acquire another one.\n    \"Chapel\" if state.current.coins <= 3 and state.current.countInDeck(\"Chapel\") == 0 and state.current.turnsTaken <= 2\n    \"Silver\"\n    \"Copper\" if state.gainsToEndGame() <= 3\n  ]\n}\n","ChapelWitch":"# Gain one Chapel and one Witch, and otherwise play Big Money. One of the most\n# powerful two-card strategies there is.\n{\n  name: 'ChapelWitch'\n  gainPriority: (state) -> [\n    \"Colony\" if state.current.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\n    \"Witch\" if state.current.countInDeck(\"Witch\") == 0\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Gold\"\n    \n    # If this bot somehow gets rid of its chapel later in the game,\n    # it won't try to acquire another one.\n    \"Chapel\" if state.current.coins <= 3 and state.current.countInDeck(\"Chapel\") == 0 and state.current.turnsTaken <= 2\n    \"Silver\"\n    \"Copper\" if state.gainsToEndGame() <= 3\n  ]\n}\n","DoubleAmbassador":"{\n  name: 'DoubleAmbassador'\n  gainPriority: (state) -> [\n    \"Colony\" if state.current.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Gold\"\n    \"Ambassador\" if state.current.countInDeck(\"Ambassador\") < 2\n    \"Silver\"\n    \"Copper\" if state.gainsToEndGame() <= 3\n  ]\n\n  # This is the default Ambassador strategy, but it should likely be changed.\n  ambassadorPriority: (state) ->\n    # Useful shorthand:\n    my = state.current\n    [\n      \"Curse,2\"\n      \"Curse,1\"\n      \"Curse,0\"\n      \"Estate,2\"\n      \"Estate,1\"\n      # Make sure we have at least $5 in the deck, including if we buy a Silver.\n      \"Copper,2\" if my.getTreasureInHand() < 3 and my.getTotalMoney() >= 5\n      \"Copper,2\" if my.getTreasureInHand() >= 5\n      \"Copper,2\" if my.getTreasureInHand() == 3 and my.getTotalMoney() >= 7\n      \"Copper,1\" if my.getTreasureInHand() < 3 and my.getTotalMoney() >= 4\n      \"Copper,1\" if my.getTreasureInHand() >= 4\n      \"Estate,0\"\n      \"Copper,0\"\n    ]\n\n  discardPriority: (state) -> [\n    \"Colony\"\n    \"Duchy\"\n    \"Province\"\n    \"Ambassador\" if state.current.countInHand(\"Ambassador\") > 1\n    \"Estate\" if state.current.countInHand(\"Ambassador\") == 0 \\\n             or state.gainsToEndGame <= 5\n    \"Curse\" if state.current.countInHand(\"Ambassador\") == 0 \\\n            or state.gainsToEndGame <= 5\n    \"Copper\"\n    \"Estate\"\n    \"Curse\"\n    null\n    \"Silver\"\n  ]\n}\n","DoubleGoons":"{\n  name: 'DoubleGoons'\n  gainPriority: (state) -> [\n    \"Colony\" if state.current.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Goons\" if state.current.countInDeck(\"Goons\") < 2\n    \"Gold\"\n    \"Silver\"\n    \"Copper\" if state.gainsToEndGame() <= 4 \\\n             and state.current.countInPlay(\"Goons\") > 0\n  ]\n}\n","DoubleMilitia":"{\n  name: 'DoubleMilitia'\n  gainPriority: (state) -> [\n    \"Colony\" if state.current.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Militia\" if state.current.countInDeck(\"Militia\") < 2\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Gold\"\n    \"Silver\"\n    \"Copper\" if state.gainsToEndGame() <= 3\n  ]\n}\n","SillyAI":"# SillyAI's strategy is to buy an arbitrary card with the highest available\n# cost. It does a reasonable job of playing like a newbie, it occasionally\n# gets lucky and pulls off nice combos, and it tests a lot of possible\n# states of the game.\n{\n  name: 'SillyAI'\n\n  gainValue: (state, card) ->\n    if card.name is \"Copper\" or card.name is \"Curse\"\n      return -1\n    else\n      [coins, potions] = card.getCost(state)\n      return coins + potions*2 + Math.random()\n}\n","SingleBaron":"{\n  name: 'SingleBaron'\n  gainPriority: (state) -> [\n    \"Colony\" if state.current.countInDeck(\"Platinum\") > 0\n    \"Province\" if state.countInSupply(\"Colony\") <= 6\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Gold\"\n    \"Baron\" if state.current.countInDeck(\"Baron\") == 0\n    \"Silver\"\n    \"Copper\" if state.gainsToEndGame() <= 2\n  ]\n  \n  discardPriority: (state) -> [\n    \"Colony\"\n    \"Province\"\n    \"Duchy\"\n    \"Curse\"\n    \"Estate\" if state.current.countInHand(\"Baron\") == 0 \\\n             or state.current.countInHand(\"Estate\") > 1\n    \"Copper\"\n    \"Baron\" if state.current.countInHand(\"Estate\") == 0\n    null\n    \"Silver\"\n    \"Estate\"\n    \"Baron\"\n  ]\n\n}\n","TournamentPlayer":"{\n  name: \"TournamentPlayer\"\n  gainPriority: (state) -> [\n    \"Colony\" if state.current.countInDeck(\"Platinum\") > 0\n    \"Province\"\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 2\n    \"Followers\"\n    \"Trusty Steed\"\n    \"Bag of Gold\"\n    \"Princess\"\n    \"Duchy\" if 0 < state.gainsToEndGame() <= 5\n    \"Diadem\"\n    \"Estate\" if 0 < state.gainsToEndGame() <= 2\n    \"Platinum\"\n    \"Gold\"\n    \"Tournament\"\n    \"Silver\"\n    \"Copper\" if state.gainsToEndGame() <= 3\n  ]\n  \n  discardPriority: (state) -> [\n    \"Colony\"\n    \"Duchy\"\n    \"Curse\"\n    \"Estate\"\n    \"Province\" if state.current.countInHand(\"Tournament\") == 0 \\\n               or state.current.countInHand(\"Province\") > 1\n    \"Copper\"\n    null\n    \"Silver\"\n    \"Gold\"\n  ]\n\n}\n"}
